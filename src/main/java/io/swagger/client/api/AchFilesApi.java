/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Batch;
import io.swagger.client.model.Batches;
import io.swagger.client.model.CreateFile;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.FileID;
import io.swagger.client.model.Files;
import io.swagger.client.model.SegmentedFiles;
import io.swagger.client.model.ValidateOpts;
import io.swagger.client.model.ValidateOptspropertiesbypassDestinationValidation;
import io.swagger.client.model.ValidateOptspropertiesbypassOriginValidation;
import io.swagger.client.model.ValidateOptspropertiesrequireABAOrigin;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AchFilesApi {
    private ApiClient apiClient;

    public AchFilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AchFilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addBatchToFile
     * @param body  (required)
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addBatchToFileCall(Batch body, String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/batches"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("X-Idempotency-Key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addBatchToFileValidateBeforeCall(Batch body, String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addBatchToFile(Async)");
        }
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling addBatchToFile(Async)");
        }
        
        com.squareup.okhttp.Call call = addBatchToFileCall(body, fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Append Batch to File
     * Append a Batch record to the specified File.
     * @param body  (required)
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addBatchToFile(Batch body, String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        addBatchToFileWithHttpInfo(body, fileID, xRequestID, xIdempotencyKey);
    }

    /**
     * Append Batch to File
     * Append a Batch record to the specified File.
     * @param body  (required)
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addBatchToFileWithHttpInfo(Batch body, String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = addBatchToFileValidateBeforeCall(body, fileID, xRequestID, xIdempotencyKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Append Batch to File (asynchronously)
     * Append a Batch record to the specified File.
     * @param body  (required)
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addBatchToFileAsync(Batch body, String fileID, String xRequestID, String xIdempotencyKey, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addBatchToFileValidateBeforeCall(body, fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkFile
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkFileCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/validate"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkFileValidateBeforeCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling checkFile(Async)");
        }
        
        com.squareup.okhttp.Call call = checkFileCall(fileID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate File
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Error checkFile(String fileID, String xRequestID) throws ApiException {
        ApiResponse<Error> resp = checkFileWithHttpInfo(fileID, xRequestID);
        return resp.getData();
    }

    /**
     * Validate File
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Error> checkFileWithHttpInfo(String fileID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = checkFileValidateBeforeCall(fileID, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate File (asynchronously)
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkFileAsync(String fileID, String xRequestID, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkFileValidateBeforeCall(fileID, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFile
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFileCall(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/files/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requireABAOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requireABAOrigin", requireABAOrigin));
        if (bypassOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bypassOrigin", bypassOrigin));
        if (bypassDestination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bypassDestination", bypassDestination));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("X-Idempotency-Key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFileValidateBeforeCall(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFile(Async)");
        }
        
        com.squareup.okhttp.Call call = createFileCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create File
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @return FileID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileID createFile(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination) throws ApiException {
        ApiResponse<FileID> resp = createFileWithHttpInfo(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination);
        return resp.getData();
    }

    /**
     * Create File
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @return ApiResponse&lt;FileID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileID> createFileWithHttpInfo(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination) throws ApiException {
        com.squareup.okhttp.Call call = createFileValidateBeforeCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, null, null);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create File (asynchronously)
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFileAsync(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ApiCallback<FileID> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFileValidateBeforeCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFile
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFileCall(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/files/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requireABAOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requireABAOrigin", requireABAOrigin));
        if (bypassOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bypassOrigin", bypassOrigin));
        if (bypassDestination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bypassDestination", bypassDestination));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("X-Idempotency-Key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFileValidateBeforeCall(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFile(Async)");
        }
        
        com.squareup.okhttp.Call call = createFileCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create File
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @return FileID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileID createFile(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination) throws ApiException {
        ApiResponse<FileID> resp = createFileWithHttpInfo(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination);
        return resp.getData();
    }

    /**
     * Create File
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @return ApiResponse&lt;FileID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileID> createFileWithHttpInfo(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination) throws ApiException {
        com.squareup.okhttp.Call call = createFileValidateBeforeCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, null, null);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create File (asynchronously)
     * Create a new File object from either the plaintext or JSON representation.
     * @param body Content of the ACH file (in json or raw text) (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param requireABAOrigin Optional parameter to enable routing number validation over ImmediateOrigin (optional)
     * @param bypassOrigin Optional parameter to disable ImmediateOrigin validation (optional)
     * @param bypassDestination Optional parameter to disable ImmediateDestination validation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFileAsync(String body, String xRequestID, String xIdempotencyKey, ValidateOptspropertiesrequireABAOrigin requireABAOrigin, ValidateOptspropertiesbypassOriginValidation bypassOrigin, ValidateOptspropertiesbypassDestinationValidation bypassDestination, final ApiCallback<FileID> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFileValidateBeforeCall(body, xRequestID, xIdempotencyKey, requireABAOrigin, bypassOrigin, bypassDestination, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteACHFile
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteACHFileCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteACHFileValidateBeforeCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling deleteACHFile(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteACHFileCall(fileID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete File
     * Permanently deletes a File and associated Batches. It cannot be undone.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteACHFile(String fileID, String xRequestID) throws ApiException {
        deleteACHFileWithHttpInfo(fileID, xRequestID);
    }

    /**
     * Delete File
     * Permanently deletes a File and associated Batches. It cannot be undone.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteACHFileWithHttpInfo(String fileID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = deleteACHFileValidateBeforeCall(fileID, xRequestID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete File (asynchronously)
     * Permanently deletes a File and associated Batches. It cannot be undone.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteACHFileAsync(String fileID, String xRequestID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteACHFileValidateBeforeCall(fileID, xRequestID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFileBatch
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileBatchCall(String fileID, String batchID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/batches/{batchID}"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()))
            .replaceAll("\\{" + "batchID" + "\\}", apiClient.escapeString(batchID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileBatchValidateBeforeCall(String fileID, String batchID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling deleteFileBatch(Async)");
        }
        // verify the required parameter 'batchID' is set
        if (batchID == null) {
            throw new ApiException("Missing the required parameter 'batchID' when calling deleteFileBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFileBatchCall(fileID, batchID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Batch
     * Delete a Batch from a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFileBatch(String fileID, String batchID, String xRequestID) throws ApiException {
        deleteFileBatchWithHttpInfo(fileID, batchID, xRequestID);
    }

    /**
     * Delete Batch
     * Delete a Batch from a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileBatchWithHttpInfo(String fileID, String batchID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileBatchValidateBeforeCall(fileID, batchID, xRequestID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Batch (asynchronously)
     * Delete a Batch from a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileBatchAsync(String fileID, String batchID, String xRequestID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileBatchValidateBeforeCall(fileID, batchID, xRequestID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for flattenFile
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flattenFileCall(String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/flatten"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("X-Idempotency-Key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flattenFileValidateBeforeCall(String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling flattenFile(Async)");
        }
        
        com.squareup.okhttp.Call call = flattenFileCall(fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Flatten Batches
     * Consolidate Batches and Entries into the minimum number of Batches needed.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @return FileID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileID flattenFile(String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        ApiResponse<FileID> resp = flattenFileWithHttpInfo(fileID, xRequestID, xIdempotencyKey);
        return resp.getData();
    }

    /**
     * Flatten Batches
     * Consolidate Batches and Entries into the minimum number of Batches needed.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @return ApiResponse&lt;FileID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileID> flattenFileWithHttpInfo(String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = flattenFileValidateBeforeCall(fileID, xRequestID, xIdempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flatten Batches (asynchronously)
     * Consolidate Batches and Entries into the minimum number of Batches needed.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flattenFileAsync(String fileID, String xRequestID, String xIdempotencyKey, final ApiCallback<FileID> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flattenFileValidateBeforeCall(fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileID>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileBatch
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileBatchCall(String fileID, String batchID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/batches/{batchID}"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()))
            .replaceAll("\\{" + "batchID" + "\\}", apiClient.escapeString(batchID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileBatchValidateBeforeCall(String fileID, String batchID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling getFileBatch(Async)");
        }
        // verify the required parameter 'batchID' is set
        if (batchID == null) {
            throw new ApiException("Missing the required parameter 'batchID' when calling getFileBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileBatchCall(fileID, batchID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Batch
     * Get a specific Batch on a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Batch getFileBatch(String fileID, String batchID, String xRequestID) throws ApiException {
        ApiResponse<Batch> resp = getFileBatchWithHttpInfo(fileID, batchID, xRequestID);
        return resp.getData();
    }

    /**
     * Get Batch
     * Get a specific Batch on a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Batch> getFileBatchWithHttpInfo(String fileID, String batchID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = getFileBatchValidateBeforeCall(fileID, batchID, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Batch (asynchronously)
     * Get a specific Batch on a File.
     * @param fileID File ID (required)
     * @param batchID Batch ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileBatchAsync(String fileID, String batchID, String xRequestID, final ApiCallback<Batch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileBatchValidateBeforeCall(fileID, batchID, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileBatches
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileBatchesCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/batches"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileBatchesValidateBeforeCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling getFileBatches(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileBatchesCall(fileID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Batches
     * Get the Batches on a File.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return Batches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Batches getFileBatches(String fileID, String xRequestID) throws ApiException {
        ApiResponse<Batches> resp = getFileBatchesWithHttpInfo(fileID, xRequestID);
        return resp.getData();
    }

    /**
     * Get Batches
     * Get the Batches on a File.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Batches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Batches> getFileBatchesWithHttpInfo(String fileID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = getFileBatchesValidateBeforeCall(fileID, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<Batches>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Batches (asynchronously)
     * Get the Batches on a File.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileBatchesAsync(String fileID, String xRequestID, final ApiCallback<Batches> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileBatchesValidateBeforeCall(fileID, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Batches>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileByID
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileByIDCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileByIDValidateBeforeCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling getFileByID(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileByIDCall(fileID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve File
     * Get the details of an existing File using the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFileByID(String fileID, String xRequestID) throws ApiException {
        ApiResponse<File> resp = getFileByIDWithHttpInfo(fileID, xRequestID);
        return resp.getData();
    }

    /**
     * Retrieve File
     * Get the details of an existing File using the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFileByIDWithHttpInfo(String fileID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = getFileByIDValidateBeforeCall(fileID, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve File (asynchronously)
     * Get the details of an existing File using the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileByIDAsync(String fileID, String xRequestID, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileByIDValidateBeforeCall(fileID, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileContents
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileContentsCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/contents"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileContentsValidateBeforeCall(String fileID, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling getFileContents(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileContentsCall(fileID, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get File Contents
     * Assembles the existing File (batches and controls) records, computes sequence numbers and totals. Returns plaintext file. 
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getFileContents(String fileID, String xRequestID) throws ApiException {
        ApiResponse<String> resp = getFileContentsWithHttpInfo(fileID, xRequestID);
        return resp.getData();
    }

    /**
     * Get File Contents
     * Assembles the existing File (batches and controls) records, computes sequence numbers and totals. Returns plaintext file. 
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getFileContentsWithHttpInfo(String fileID, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = getFileContentsValidateBeforeCall(fileID, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get File Contents (asynchronously)
     * Assembles the existing File (batches and controls) records, computes sequence numbers and totals. Returns plaintext file. 
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileContentsAsync(String fileID, String xRequestID, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileContentsValidateBeforeCall(fileID, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFiles
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesCall(String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesValidateBeforeCall(String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getFilesCall(xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Files
     * List all ACH Files created with the ACH service. These Files are not persisted through multiple runs of the service.
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return Files
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Files getFiles(String xRequestID) throws ApiException {
        ApiResponse<Files> resp = getFilesWithHttpInfo(xRequestID);
        return resp.getData();
    }

    /**
     * List Files
     * List all ACH Files created with the ACH service. These Files are not persisted through multiple runs of the service.
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Files&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Files> getFilesWithHttpInfo(String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = getFilesValidateBeforeCall(xRequestID, null, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * List all ACH Files created with the ACH service. These Files are not persisted through multiple runs of the service.
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesAsync(String xRequestID, final ApiCallback<Files> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesValidateBeforeCall(xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ping
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pingCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pingValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pingCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ping ACH service
     * Check if the ACH service is running.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ping() throws ApiException {
        pingWithHttpInfo();
    }

    /**
     * Ping ACH service
     * Check if the ACH service is running.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pingWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pingValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Ping ACH service (asynchronously)
     * Check if the ACH service is running.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pingAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pingValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for segmentFile
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call segmentFileCall(String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/segment"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("X-Idempotency-Key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call segmentFileValidateBeforeCall(String fileID, String xRequestID, String xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling segmentFile(Async)");
        }
        
        com.squareup.okhttp.Call call = segmentFileCall(fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Segment File
     * Split one File into two. One with only debits and one with only credits.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @return SegmentedFiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SegmentedFiles segmentFile(String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        ApiResponse<SegmentedFiles> resp = segmentFileWithHttpInfo(fileID, xRequestID, xIdempotencyKey);
        return resp.getData();
    }

    /**
     * Segment File
     * Split one File into two. One with only debits and one with only credits.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @return ApiResponse&lt;SegmentedFiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SegmentedFiles> segmentFileWithHttpInfo(String fileID, String xRequestID, String xIdempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = segmentFileValidateBeforeCall(fileID, xRequestID, xIdempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<SegmentedFiles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Segment File (asynchronously)
     * Split one File into two. One with only debits and one with only credits.
     * @param fileID File ID (required)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param xIdempotencyKey Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy to not collide with each other in your requests. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call segmentFileAsync(String fileID, String xRequestID, String xIdempotencyKey, final ApiCallback<SegmentedFiles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = segmentFileValidateBeforeCall(fileID, xRequestID, xIdempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SegmentedFiles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateFile
     * @param fileID File ID (required)
     * @param body  (optional)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateFileCall(String fileID, ValidateOpts body, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/files/{fileID}/validate"
            .replaceAll("\\{" + "fileID" + "\\}", apiClient.escapeString(fileID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateFileValidateBeforeCall(String fileID, ValidateOpts body, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileID' is set
        if (fileID == null) {
            throw new ApiException("Missing the required parameter 'fileID' when calling validateFile(Async)");
        }
        
        com.squareup.okhttp.Call call = validateFileCall(fileID, body, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate File (Custom)
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param body  (optional)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Error validateFile(String fileID, ValidateOpts body, String xRequestID) throws ApiException {
        ApiResponse<Error> resp = validateFileWithHttpInfo(fileID, body, xRequestID);
        return resp.getData();
    }

    /**
     * Validate File (Custom)
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param body  (optional)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Error> validateFileWithHttpInfo(String fileID, ValidateOpts body, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = validateFileValidateBeforeCall(fileID, body, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate File (Custom) (asynchronously)
     * Validates the existing File. You need only supply the unique File identifier that was returned upon creation.
     * @param fileID File ID (required)
     * @param body  (optional)
     * @param xRequestID Optional Request ID allows application developer to trace requests through the system&#x27;s logs (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateFileAsync(String fileID, ValidateOpts body, String xRequestID, final ApiCallback<Error> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateFileValidateBeforeCall(fileID, body, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
