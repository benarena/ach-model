/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Addenda98
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class Addenda98 {
  @SerializedName("id")
  private String id = null;

  @SerializedName("typeCode")
  private String typeCode = null;

  @SerializedName("changeCode")
  private String changeCode = null;

  @SerializedName("originalTrace")
  private String originalTrace = null;

  @SerializedName("originalDFI")
  private String originalDFI = null;

  @SerializedName("correctedData")
  private String correctedData = null;

  @SerializedName("traceNumber")
  private String traceNumber = null;

  public Addenda98 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Client-defined string used as a reference to this record.
   * @return id
  **/
  @Schema(example = "5ca8d25a", description = "Client-defined string used as a reference to this record.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Addenda98 typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

   /**
   * 98 - NACHA regulations
   * @return typeCode
  **/
  @Schema(example = "98", required = true, description = "98 - NACHA regulations")
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }

  public Addenda98 changeCode(String changeCode) {
    this.changeCode = changeCode;
    return this;
  }

   /**
   * ChangeCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for a change Entry.
   * @return changeCode
  **/
  @Schema(example = "C01", required = true, description = "ChangeCode field contains a standard code used by an ACH Operator or RDFI to describe the reason for a change Entry.")
  public String getChangeCode() {
    return changeCode;
  }

  public void setChangeCode(String changeCode) {
    this.changeCode = changeCode;
  }

  public Addenda98 originalTrace(String originalTrace) {
    this.originalTrace = originalTrace;
    return this;
  }

   /**
   * OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification. The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI, in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization. 
   * @return originalTrace
  **/
  @Schema(example = "214874812", required = true, description = "OriginalTrace This field contains the Trace Number as originally included on the forward Entry or Prenotification. The RDFI must include the Original Entry Trace Number in the Addenda Record of an Entry being returned to an ODFI, in the Addenda Record of an 98, within an Acknowledgment Entry, or with an RDFI request for a copy of an authorization. ")
  public String getOriginalTrace() {
    return originalTrace;
  }

  public void setOriginalTrace(String originalTrace) {
    this.originalTrace = originalTrace;
  }

  public Addenda98 originalDFI(String originalDFI) {
    this.originalDFI = originalDFI;
    return this;
  }

   /**
   * The Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the forward Entry or Prenotification that the RDFI is returning or correcting.
   * @return originalDFI
  **/
  @Schema(example = "98765432", required = true, description = "The Receiving DFI Identification (addenda.RDFIIdentification) as originally included on the forward Entry or Prenotification that the RDFI is returning or correcting.")
  public String getOriginalDFI() {
    return originalDFI;
  }

  public void setOriginalDFI(String originalDFI) {
    this.originalDFI = originalDFI;
  }

  public Addenda98 correctedData(String correctedData) {
    this.correctedData = correctedData;
    return this;
  }

   /**
   * Correct field value of what changeCode references
   * @return correctedData
  **/
  @Schema(example = "198424892", required = true, description = "Correct field value of what changeCode references")
  public String getCorrectedData() {
    return correctedData;
  }

  public void setCorrectedData(String correctedData) {
    this.correctedData = correctedData;
  }

  public Addenda98 traceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
    return this;
  }

   /**
   * Entry Detail Trace Number
   * @return traceNumber
  **/
  @Schema(example = "124782618117", description = "Entry Detail Trace Number")
  public String getTraceNumber() {
    return traceNumber;
  }

  public void setTraceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda98 addenda98 = (Addenda98) o;
    return Objects.equals(this.id, addenda98.id) &&
        Objects.equals(this.typeCode, addenda98.typeCode) &&
        Objects.equals(this.changeCode, addenda98.changeCode) &&
        Objects.equals(this.originalTrace, addenda98.originalTrace) &&
        Objects.equals(this.originalDFI, addenda98.originalDFI) &&
        Objects.equals(this.correctedData, addenda98.correctedData) &&
        Objects.equals(this.traceNumber, addenda98.traceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, changeCode, originalTrace, originalDFI, correctedData, traceNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda98 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    changeCode: ").append(toIndentedString(changeCode)).append("\n");
    sb.append("    originalTrace: ").append(toIndentedString(originalTrace)).append("\n");
    sb.append("    originalDFI: ").append(toIndentedString(originalDFI)).append("\n");
    sb.append("    correctedData: ").append(toIndentedString(correctedData)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
