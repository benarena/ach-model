/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Addenda18
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class Addenda18 {
  @SerializedName("id")
  private String id = null;

  @SerializedName("typeCode")
  private String typeCode = null;

  @SerializedName("foreignCorrespondentBankName")
  private String foreignCorrespondentBankName = null;

  @SerializedName("foreignCorrespondentBankIDNumberQualifier")
  private String foreignCorrespondentBankIDNumberQualifier = null;

  @SerializedName("foreignCorrespondentBankIDNumber")
  private String foreignCorrespondentBankIDNumber = null;

  @SerializedName("foreignCorrespondentBankBranchCountryCode")
  private String foreignCorrespondentBankBranchCountryCode = null;

  @SerializedName("sequenceNumber")
  private BigDecimal sequenceNumber = null;

  @SerializedName("entryDetailSequenceNumber")
  private BigDecimal entryDetailSequenceNumber = null;

  public Addenda18 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Client-defined string used as a reference to this record.
   * @return id
  **/
  @Schema(example = "5ca8d25a", description = "Client-defined string used as a reference to this record.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Addenda18 typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

   /**
   * 18 - NACHA regulations
   * @return typeCode
  **/
  @Schema(example = "18", required = true, description = "18 - NACHA regulations")
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }

  public Addenda18 foreignCorrespondentBankName(String foreignCorrespondentBankName) {
    this.foreignCorrespondentBankName = foreignCorrespondentBankName;
    return this;
  }

   /**
   * Name of the Foreign Correspondent Bank
   * @return foreignCorrespondentBankName
  **/
  @Schema(example = "Other Bank", required = true, description = "Name of the Foreign Correspondent Bank")
  public String getForeignCorrespondentBankName() {
    return foreignCorrespondentBankName;
  }

  public void setForeignCorrespondentBankName(String foreignCorrespondentBankName) {
    this.foreignCorrespondentBankName = foreignCorrespondentBankName;
  }

  public Addenda18 foreignCorrespondentBankIDNumberQualifier(String foreignCorrespondentBankIDNumberQualifier) {
    this.foreignCorrespondentBankIDNumberQualifier = foreignCorrespondentBankIDNumberQualifier;
    return this;
  }

   /**
   * Foreign Correspondent Bank Identification Number Qualifier contains a 2-digit code that identifies the numbering scheme used in the Foreign Correspondent Bank Identification Number field. Code values for this field are:   \&quot;01\&quot; &#x3D; National Clearing System |   \&quot;02\&quot; &#x3D; BIC Code |   \&quot;03\&quot; &#x3D; IBAN Code 
   * @return foreignCorrespondentBankIDNumberQualifier
  **/
  @Schema(example = "01", description = "Foreign Correspondent Bank Identification Number Qualifier contains a 2-digit code that identifies the numbering scheme used in the Foreign Correspondent Bank Identification Number field. Code values for this field are:   \"01\" = National Clearing System |   \"02\" = BIC Code |   \"03\" = IBAN Code ")
  public String getForeignCorrespondentBankIDNumberQualifier() {
    return foreignCorrespondentBankIDNumberQualifier;
  }

  public void setForeignCorrespondentBankIDNumberQualifier(String foreignCorrespondentBankIDNumberQualifier) {
    this.foreignCorrespondentBankIDNumberQualifier = foreignCorrespondentBankIDNumberQualifier;
  }

  public Addenda18 foreignCorrespondentBankIDNumber(String foreignCorrespondentBankIDNumber) {
    this.foreignCorrespondentBankIDNumber = foreignCorrespondentBankIDNumber;
    return this;
  }

   /**
   * Foreign Correspondent Bank Identification Number contains the bank ID number of the Foreign Correspondent Bank
   * @return foreignCorrespondentBankIDNumber
  **/
  @Schema(example = "98765432", required = true, description = "Foreign Correspondent Bank Identification Number contains the bank ID number of the Foreign Correspondent Bank")
  public String getForeignCorrespondentBankIDNumber() {
    return foreignCorrespondentBankIDNumber;
  }

  public void setForeignCorrespondentBankIDNumber(String foreignCorrespondentBankIDNumber) {
    this.foreignCorrespondentBankIDNumber = foreignCorrespondentBankIDNumber;
  }

  public Addenda18 foreignCorrespondentBankBranchCountryCode(String foreignCorrespondentBankBranchCountryCode) {
    this.foreignCorrespondentBankBranchCountryCode = foreignCorrespondentBankBranchCountryCode;
    return this;
  }

   /**
   * Foreign Correspondent Bank Branch Country Code contains the two-character code, as approved by the International Organization for Standardization (ISO), to identify the country in which the branch of the Foreign Correspondent Bank is located. Values can be found on the International Organization for Standardization website: www.iso.org 
   * @return foreignCorrespondentBankBranchCountryCode
  **/
  @Schema(example = "US", required = true, description = "Foreign Correspondent Bank Branch Country Code contains the two-character code, as approved by the International Organization for Standardization (ISO), to identify the country in which the branch of the Foreign Correspondent Bank is located. Values can be found on the International Organization for Standardization website: www.iso.org ")
  public String getForeignCorrespondentBankBranchCountryCode() {
    return foreignCorrespondentBankBranchCountryCode;
  }

  public void setForeignCorrespondentBankBranchCountryCode(String foreignCorrespondentBankBranchCountryCode) {
    this.foreignCorrespondentBankBranchCountryCode = foreignCorrespondentBankBranchCountryCode;
  }

  public Addenda18 sequenceNumber(BigDecimal sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * SequenceNumber is consecutively assigned to each Addenda17 Record following an Entry Detail Record. The first Addenda17 sequence number must always be a 1. 
   * @return sequenceNumber
  **/
  @Schema(example = "1", required = true, description = "SequenceNumber is consecutively assigned to each Addenda17 Record following an Entry Detail Record. The first Addenda17 sequence number must always be a 1. ")
  public BigDecimal getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(BigDecimal sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }

  public Addenda18 entryDetailSequenceNumber(BigDecimal entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
    return this;
  }

   /**
   * EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record&#x27;s trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. 
   * @return entryDetailSequenceNumber
  **/
  @Schema(example = "2618117", required = true, description = "EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record's trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. ")
  public BigDecimal getEntryDetailSequenceNumber() {
    return entryDetailSequenceNumber;
  }

  public void setEntryDetailSequenceNumber(BigDecimal entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda18 addenda18 = (Addenda18) o;
    return Objects.equals(this.id, addenda18.id) &&
        Objects.equals(this.typeCode, addenda18.typeCode) &&
        Objects.equals(this.foreignCorrespondentBankName, addenda18.foreignCorrespondentBankName) &&
        Objects.equals(this.foreignCorrespondentBankIDNumberQualifier, addenda18.foreignCorrespondentBankIDNumberQualifier) &&
        Objects.equals(this.foreignCorrespondentBankIDNumber, addenda18.foreignCorrespondentBankIDNumber) &&
        Objects.equals(this.foreignCorrespondentBankBranchCountryCode, addenda18.foreignCorrespondentBankBranchCountryCode) &&
        Objects.equals(this.sequenceNumber, addenda18.sequenceNumber) &&
        Objects.equals(this.entryDetailSequenceNumber, addenda18.entryDetailSequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, foreignCorrespondentBankName, foreignCorrespondentBankIDNumberQualifier, foreignCorrespondentBankIDNumber, foreignCorrespondentBankBranchCountryCode, sequenceNumber, entryDetailSequenceNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda18 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    foreignCorrespondentBankName: ").append(toIndentedString(foreignCorrespondentBankName)).append("\n");
    sb.append("    foreignCorrespondentBankIDNumberQualifier: ").append(toIndentedString(foreignCorrespondentBankIDNumberQualifier)).append("\n");
    sb.append("    foreignCorrespondentBankIDNumber: ").append(toIndentedString(foreignCorrespondentBankIDNumber)).append("\n");
    sb.append("    foreignCorrespondentBankBranchCountryCode: ").append(toIndentedString(foreignCorrespondentBankBranchCountryCode)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    entryDetailSequenceNumber: ").append(toIndentedString(entryDetailSequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
