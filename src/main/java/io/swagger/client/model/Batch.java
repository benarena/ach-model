/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BatchControl;
import io.swagger.client.model.BatchHeader;
import io.swagger.client.model.EntryDetail;
import io.swagger.client.model.Offset;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Batch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class Batch {
  @SerializedName("batchHeader")
  private BatchHeader batchHeader = null;

  @SerializedName("entryDetails")
  private List<EntryDetail> entryDetails = new ArrayList<EntryDetail>();

  @SerializedName("batchControl")
  private BatchControl batchControl = null;

  @SerializedName("offset")
  private Offset offset = null;

  public Batch batchHeader(BatchHeader batchHeader) {
    this.batchHeader = batchHeader;
    return this;
  }

   /**
   * Get batchHeader
   * @return batchHeader
  **/
  @Schema(required = true, description = "")
  public BatchHeader getBatchHeader() {
    return batchHeader;
  }

  public void setBatchHeader(BatchHeader batchHeader) {
    this.batchHeader = batchHeader;
  }

  public Batch entryDetails(List<EntryDetail> entryDetails) {
    this.entryDetails = entryDetails;
    return this;
  }

  public Batch addEntryDetailsItem(EntryDetail entryDetailsItem) {
    this.entryDetails.add(entryDetailsItem);
    return this;
  }

   /**
   * Get entryDetails
   * @return entryDetails
  **/
  @Schema(required = true, description = "")
  public List<EntryDetail> getEntryDetails() {
    return entryDetails;
  }

  public void setEntryDetails(List<EntryDetail> entryDetails) {
    this.entryDetails = entryDetails;
  }

  public Batch batchControl(BatchControl batchControl) {
    this.batchControl = batchControl;
    return this;
  }

   /**
   * Get batchControl
   * @return batchControl
  **/
  @Schema(required = true, description = "")
  public BatchControl getBatchControl() {
    return batchControl;
  }

  public void setBatchControl(BatchControl batchControl) {
    this.batchControl = batchControl;
  }

  public Batch offset(Offset offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(required = true, description = "")
  public Offset getOffset() {
    return offset;
  }

  public void setOffset(Offset offset) {
    this.offset = offset;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Batch batch = (Batch) o;
    return Objects.equals(this.batchHeader, batch.batchHeader) &&
        Objects.equals(this.entryDetails, batch.entryDetails) &&
        Objects.equals(this.batchControl, batch.batchControl) &&
        Objects.equals(this.offset, batch.offset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchHeader, entryDetails, batchControl, offset);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Batch {\n");
    
    sb.append("    batchHeader: ").append(toIndentedString(batchHeader)).append("\n");
    sb.append("    entryDetails: ").append(toIndentedString(entryDetails)).append("\n");
    sb.append("    batchControl: ").append(toIndentedString(batchControl)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
