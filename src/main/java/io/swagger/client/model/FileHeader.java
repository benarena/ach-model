/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FileHeader
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class FileHeader {
  @SerializedName("immediateOrigin")
  private String immediateOrigin = null;

  @SerializedName("immediateOriginName")
  private String immediateOriginName = null;

  @SerializedName("immediateDestination")
  private String immediateDestination = null;

  @SerializedName("immediateDestinationName")
  private String immediateDestinationName = null;

  @SerializedName("fileCreationTime")
  private String fileCreationTime = null;

  @SerializedName("fileCreationDate")
  private String fileCreationDate = null;

  @SerializedName("fileIDModifier")
  private String fileIDModifier = null;

  public FileHeader immediateOrigin(String immediateOrigin) {
    this.immediateOrigin = immediateOrigin;
    return this;
  }

   /**
   * Contains the Routing Number of the ACH Operator or sending point that is sending the file.
   * @return immediateOrigin
  **/
  @Schema(example = "999912342", required = true, description = "Contains the Routing Number of the ACH Operator or sending point that is sending the file.")
  public String getImmediateOrigin() {
    return immediateOrigin;
  }

  public void setImmediateOrigin(String immediateOrigin) {
    this.immediateOrigin = immediateOrigin;
  }

  public FileHeader immediateOriginName(String immediateOriginName) {
    this.immediateOriginName = immediateOriginName;
    return this;
  }

   /**
   * The name of the ACH Operator or sending point that is sending the file.
   * @return immediateOriginName
  **/
  @Schema(example = "My Bank Name", required = true, description = "The name of the ACH Operator or sending point that is sending the file.")
  public String getImmediateOriginName() {
    return immediateOriginName;
  }

  public void setImmediateOriginName(String immediateOriginName) {
    this.immediateOriginName = immediateOriginName;
  }

  public FileHeader immediateDestination(String immediateDestination) {
    this.immediateDestination = immediateDestination;
    return this;
  }

   /**
   * Contains the Routing Number of the ACH Operator or receiving point to which the file is being sent.
   * @return immediateDestination
  **/
  @Schema(example = "691000134", required = true, description = "Contains the Routing Number of the ACH Operator or receiving point to which the file is being sent.")
  public String getImmediateDestination() {
    return immediateDestination;
  }

  public void setImmediateDestination(String immediateDestination) {
    this.immediateDestination = immediateDestination;
  }

  public FileHeader immediateDestinationName(String immediateDestinationName) {
    this.immediateDestinationName = immediateDestinationName;
    return this;
  }

   /**
   * The name of the ACH Operator or receiving point to which the file is being sent.
   * @return immediateDestinationName
  **/
  @Schema(example = "Federal Reserve Bank", required = true, description = "The name of the ACH Operator or receiving point to which the file is being sent.")
  public String getImmediateDestinationName() {
    return immediateDestinationName;
  }

  public void setImmediateDestinationName(String immediateDestinationName) {
    this.immediateDestinationName = immediateDestinationName;
  }

  public FileHeader fileCreationTime(String fileCreationTime) {
    this.fileCreationTime = fileCreationTime;
    return this;
  }

   /**
   * The File Creation Time is the time when the file was prepared by an ODFI. (Format HHmm - H&#x3D;Hour, m&#x3D;Minute)
   * @return fileCreationTime
  **/
  @Schema(example = "1504", required = true, description = "The File Creation Time is the time when the file was prepared by an ODFI. (Format HHmm - H=Hour, m=Minute)")
  public String getFileCreationTime() {
    return fileCreationTime;
  }

  public void setFileCreationTime(String fileCreationTime) {
    this.fileCreationTime = fileCreationTime;
  }

  public FileHeader fileCreationDate(String fileCreationDate) {
    this.fileCreationDate = fileCreationDate;
    return this;
  }

   /**
   * The File Creation Date is the date when the file was prepared by an ODFI. (Format YYMMDD - Y&#x3D;Year, M&#x3D;Month, D&#x3D;Day)
   * @return fileCreationDate
  **/
  @Schema(example = "190102", required = true, description = "The File Creation Date is the date when the file was prepared by an ODFI. (Format YYMMDD - Y=Year, M=Month, D=Day)")
  public String getFileCreationDate() {
    return fileCreationDate;
  }

  public void setFileCreationDate(String fileCreationDate) {
    this.fileCreationDate = fileCreationDate;
  }

  public FileHeader fileIDModifier(String fileIDModifier) {
    this.fileIDModifier = fileIDModifier;
    return this;
  }

   /**
   * Incremented value for each file for RDFIs.
   * @return fileIDModifier
  **/
  @Schema(example = "0", description = "Incremented value for each file for RDFIs.")
  public String getFileIDModifier() {
    return fileIDModifier;
  }

  public void setFileIDModifier(String fileIDModifier) {
    this.fileIDModifier = fileIDModifier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileHeader fileHeader = (FileHeader) o;
    return Objects.equals(this.immediateOrigin, fileHeader.immediateOrigin) &&
        Objects.equals(this.immediateOriginName, fileHeader.immediateOriginName) &&
        Objects.equals(this.immediateDestination, fileHeader.immediateDestination) &&
        Objects.equals(this.immediateDestinationName, fileHeader.immediateDestinationName) &&
        Objects.equals(this.fileCreationTime, fileHeader.fileCreationTime) &&
        Objects.equals(this.fileCreationDate, fileHeader.fileCreationDate) &&
        Objects.equals(this.fileIDModifier, fileHeader.fileIDModifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(immediateOrigin, immediateOriginName, immediateDestination, immediateDestinationName, fileCreationTime, fileCreationDate, fileIDModifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileHeader {\n");
    
    sb.append("    immediateOrigin: ").append(toIndentedString(immediateOrigin)).append("\n");
    sb.append("    immediateOriginName: ").append(toIndentedString(immediateOriginName)).append("\n");
    sb.append("    immediateDestination: ").append(toIndentedString(immediateDestination)).append("\n");
    sb.append("    immediateDestinationName: ").append(toIndentedString(immediateDestinationName)).append("\n");
    sb.append("    fileCreationTime: ").append(toIndentedString(fileCreationTime)).append("\n");
    sb.append("    fileCreationDate: ").append(toIndentedString(fileCreationDate)).append("\n");
    sb.append("    fileIDModifier: ").append(toIndentedString(fileIDModifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
