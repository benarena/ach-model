/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FileControl
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class FileControl {
  @SerializedName("ID")
  private String ID = null;

  @SerializedName("batchCount")
  private Integer batchCount = null;

  @SerializedName("blockCount")
  private Integer blockCount = null;

  @SerializedName("entryAddendaCount")
  private Integer entryAddendaCount = null;

  @SerializedName("entryHash")
  private Integer entryHash = null;

  @SerializedName("totalDebit")
  private Integer totalDebit = null;

  @SerializedName("totalCredit")
  private Integer totalCredit = null;

  public FileControl ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * File ID
   * @return ID
  **/
  @Schema(example = "d1e26288", required = true, description = "File ID")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public FileControl batchCount(Integer batchCount) {
    this.batchCount = batchCount;
    return this;
  }

   /**
   * Count of Batches in the File
   * minimum: 1
   * @return batchCount
  **/
  @Schema(example = "1", required = true, description = "Count of Batches in the File")
  public Integer getBatchCount() {
    return batchCount;
  }

  public void setBatchCount(Integer batchCount) {
    this.batchCount = batchCount;
  }

  public FileControl blockCount(Integer blockCount) {
    this.blockCount = blockCount;
    return this;
  }

   /**
   * Total number of records in the file (include all headers and trailer) divided by 10 (This number must be evenly divisible by 10. If not, additional records consisting of all 9&#x27;s are added to the file after the initial &#x27;9&#x27; record to fill out the block 10.) 
   * @return blockCount
  **/
  @Schema(example = "1", required = true, description = "Total number of records in the file (include all headers and trailer) divided by 10 (This number must be evenly divisible by 10. If not, additional records consisting of all 9's are added to the file after the initial '9' record to fill out the block 10.) ")
  public Integer getBlockCount() {
    return blockCount;
  }

  public void setBlockCount(Integer blockCount) {
    this.blockCount = blockCount;
  }

  public FileControl entryAddendaCount(Integer entryAddendaCount) {
    this.entryAddendaCount = entryAddendaCount;
    return this;
  }

   /**
   * Total detail and addenda records in the file
   * minimum: 1
   * @return entryAddendaCount
  **/
  @Schema(example = "1", required = true, description = "Total detail and addenda records in the file")
  public Integer getEntryAddendaCount() {
    return entryAddendaCount;
  }

  public void setEntryAddendaCount(Integer entryAddendaCount) {
    this.entryAddendaCount = entryAddendaCount;
  }

  public FileControl entryHash(Integer entryHash) {
    this.entryHash = entryHash;
    return this;
  }

   /**
   * Calculated in the same manner as the batch total but includes total from entire file
   * @return entryHash
  **/
  @Schema(example = "0", required = true, description = "Calculated in the same manner as the batch total but includes total from entire file")
  public Integer getEntryHash() {
    return entryHash;
  }

  public void setEntryHash(Integer entryHash) {
    this.entryHash = entryHash;
  }

  public FileControl totalDebit(Integer totalDebit) {
    this.totalDebit = totalDebit;
    return this;
  }

   /**
   * Accumulated Batch debit totals within the file.
   * @return totalDebit
  **/
  @Schema(example = "100", required = true, description = "Accumulated Batch debit totals within the file.")
  public Integer getTotalDebit() {
    return totalDebit;
  }

  public void setTotalDebit(Integer totalDebit) {
    this.totalDebit = totalDebit;
  }

  public FileControl totalCredit(Integer totalCredit) {
    this.totalCredit = totalCredit;
    return this;
  }

   /**
   * Accumulated Batch credit totals within the file.
   * @return totalCredit
  **/
  @Schema(example = "20", required = true, description = "Accumulated Batch credit totals within the file.")
  public Integer getTotalCredit() {
    return totalCredit;
  }

  public void setTotalCredit(Integer totalCredit) {
    this.totalCredit = totalCredit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileControl fileControl = (FileControl) o;
    return Objects.equals(this.ID, fileControl.ID) &&
        Objects.equals(this.batchCount, fileControl.batchCount) &&
        Objects.equals(this.blockCount, fileControl.blockCount) &&
        Objects.equals(this.entryAddendaCount, fileControl.entryAddendaCount) &&
        Objects.equals(this.entryHash, fileControl.entryHash) &&
        Objects.equals(this.totalDebit, fileControl.totalDebit) &&
        Objects.equals(this.totalCredit, fileControl.totalCredit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, batchCount, blockCount, entryAddendaCount, entryHash, totalDebit, totalCredit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileControl {\n");
    
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    batchCount: ").append(toIndentedString(batchCount)).append("\n");
    sb.append("    blockCount: ").append(toIndentedString(blockCount)).append("\n");
    sb.append("    entryAddendaCount: ").append(toIndentedString(entryAddendaCount)).append("\n");
    sb.append("    entryHash: ").append(toIndentedString(entryHash)).append("\n");
    sb.append("    totalDebit: ").append(toIndentedString(totalDebit)).append("\n");
    sb.append("    totalCredit: ").append(toIndentedString(totalCredit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
