/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Addenda02
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-23T19:59:31.531Z[GMT]")
public class Addenda02 {
  @SerializedName("id")
  private String id = null;

  @SerializedName("typeCode")
  private String typeCode = null;

  @SerializedName("referenceInformationOne")
  private String referenceInformationOne = null;

  @SerializedName("referenceInformationTwo")
  private String referenceInformationTwo = null;

  @SerializedName("terminalIdentificationCode")
  private String terminalIdentificationCode = null;

  @SerializedName("transactionSerialNumber")
  private String transactionSerialNumber = null;

  @SerializedName("transactionDate")
  private String transactionDate = null;

  @SerializedName("authorizationCodeOrExpireDate")
  private String authorizationCodeOrExpireDate = null;

  @SerializedName("terminalLocation")
  private String terminalLocation = null;

  @SerializedName("terminalCity")
  private String terminalCity = null;

  @SerializedName("terminalState")
  private String terminalState = null;

  @SerializedName("traceNumber")
  private String traceNumber = null;

  public Addenda02 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Client-defined string used as a reference to this record.
   * @return id
  **/
  @Schema(example = "5ca8d25a", description = "Client-defined string used as a reference to this record.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Addenda02 typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

   /**
   * 02 - NACHA regulations
   * @return typeCode
  **/
  @Schema(example = "02", required = true, description = "02 - NACHA regulations")
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }

  public Addenda02 referenceInformationOne(String referenceInformationOne) {
    this.referenceInformationOne = referenceInformationOne;
    return this;
  }

   /**
   * ReferenceInformationOne may be used for additional reference numbers, identification numbers, or codes that the merchant needs to identify the particular transaction or customer. 
   * @return referenceInformationOne
  **/
  @Schema(description = "ReferenceInformationOne may be used for additional reference numbers, identification numbers, or codes that the merchant needs to identify the particular transaction or customer. ")
  public String getReferenceInformationOne() {
    return referenceInformationOne;
  }

  public void setReferenceInformationOne(String referenceInformationOne) {
    this.referenceInformationOne = referenceInformationOne;
  }

  public Addenda02 referenceInformationTwo(String referenceInformationTwo) {
    this.referenceInformationTwo = referenceInformationTwo;
    return this;
  }

   /**
   * ReferenceInformationTwo may be used for additional reference numbers, identification numbers, or codes that the merchant needs to identify the particular transaction or customer. 
   * @return referenceInformationTwo
  **/
  @Schema(description = "ReferenceInformationTwo may be used for additional reference numbers, identification numbers, or codes that the merchant needs to identify the particular transaction or customer. ")
  public String getReferenceInformationTwo() {
    return referenceInformationTwo;
  }

  public void setReferenceInformationTwo(String referenceInformationTwo) {
    this.referenceInformationTwo = referenceInformationTwo;
  }

  public Addenda02 terminalIdentificationCode(String terminalIdentificationCode) {
    this.terminalIdentificationCode = terminalIdentificationCode;
    return this;
  }

   /**
   * TerminalIdentificationCode identifies an Electronic terminal with a unique code that allows a terminal owner and/or switching network to identify the terminal at which an Entry originated. 
   * @return terminalIdentificationCode
  **/
  @Schema(example = "200509", required = true, description = "TerminalIdentificationCode identifies an Electronic terminal with a unique code that allows a terminal owner and/or switching network to identify the terminal at which an Entry originated. ")
  public String getTerminalIdentificationCode() {
    return terminalIdentificationCode;
  }

  public void setTerminalIdentificationCode(String terminalIdentificationCode) {
    this.terminalIdentificationCode = terminalIdentificationCode;
  }

  public Addenda02 transactionSerialNumber(String transactionSerialNumber) {
    this.transactionSerialNumber = transactionSerialNumber;
    return this;
  }

   /**
   * TransactionSerialNumber is assigned by the terminal at the time the transaction is originated.  The number, with the Terminal Identification Code, serves as an audit trail for the transaction and is usually assigned in ascending sequence. 
   * @return transactionSerialNumber
  **/
  @Schema(example = "100049", required = true, description = "TransactionSerialNumber is assigned by the terminal at the time the transaction is originated.  The number, with the Terminal Identification Code, serves as an audit trail for the transaction and is usually assigned in ascending sequence. ")
  public String getTransactionSerialNumber() {
    return transactionSerialNumber;
  }

  public void setTransactionSerialNumber(String transactionSerialNumber) {
    this.transactionSerialNumber = transactionSerialNumber;
  }

  public Addenda02 transactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Timestamp identifies the date on which the transaction occurred. (Format MMDD - M&#x3D;Month, D&#x3D;Day)
   * @return transactionDate
  **/
  @Schema(example = "1224", required = true, description = "Timestamp identifies the date on which the transaction occurred. (Format MMDD - M=Month, D=Day)")
  public String getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
  }

  public Addenda02 authorizationCodeOrExpireDate(String authorizationCodeOrExpireDate) {
    this.authorizationCodeOrExpireDate = authorizationCodeOrExpireDate;
    return this;
  }

   /**
   * Indicates the code that a card authorization center has furnished to the merchant.
   * @return authorizationCodeOrExpireDate
  **/
  @Schema(example = "123456", description = "Indicates the code that a card authorization center has furnished to the merchant.")
  public String getAuthorizationCodeOrExpireDate() {
    return authorizationCodeOrExpireDate;
  }

  public void setAuthorizationCodeOrExpireDate(String authorizationCodeOrExpireDate) {
    this.authorizationCodeOrExpireDate = authorizationCodeOrExpireDate;
  }

  public Addenda02 terminalLocation(String terminalLocation) {
    this.terminalLocation = terminalLocation;
    return this;
  }

   /**
   * Identifies the specific location of a terminal (i.e., street names of an intersection, address, etc.) in accordance with the requirements of Regulation E.
   * @return terminalLocation
  **/
  @Schema(example = "2nd St", required = true, description = "Identifies the specific location of a terminal (i.e., street names of an intersection, address, etc.) in accordance with the requirements of Regulation E.")
  public String getTerminalLocation() {
    return terminalLocation;
  }

  public void setTerminalLocation(String terminalLocation) {
    this.terminalLocation = terminalLocation;
  }

  public Addenda02 terminalCity(String terminalCity) {
    this.terminalCity = terminalCity;
    return this;
  }

   /**
   * Identifies the city in which the electronic terminal is located.
   * @return terminalCity
  **/
  @Schema(example = "Anytown", required = true, description = "Identifies the city in which the electronic terminal is located.")
  public String getTerminalCity() {
    return terminalCity;
  }

  public void setTerminalCity(String terminalCity) {
    this.terminalCity = terminalCity;
  }

  public Addenda02 terminalState(String terminalState) {
    this.terminalState = terminalState;
    return this;
  }

   /**
   * Identifies the state in which the electronic terminal is located.
   * @return terminalState
  **/
  @Schema(example = "CA", required = true, description = "Identifies the state in which the electronic terminal is located.")
  public String getTerminalState() {
    return terminalState;
  }

  public void setTerminalState(String terminalState) {
    this.terminalState = terminalState;
  }

  public Addenda02 traceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
    return this;
  }

   /**
   * Entry Detail Trace Number
   * @return traceNumber
  **/
  @Schema(example = "124782618117", description = "Entry Detail Trace Number")
  public String getTraceNumber() {
    return traceNumber;
  }

  public void setTraceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda02 addenda02 = (Addenda02) o;
    return Objects.equals(this.id, addenda02.id) &&
        Objects.equals(this.typeCode, addenda02.typeCode) &&
        Objects.equals(this.referenceInformationOne, addenda02.referenceInformationOne) &&
        Objects.equals(this.referenceInformationTwo, addenda02.referenceInformationTwo) &&
        Objects.equals(this.terminalIdentificationCode, addenda02.terminalIdentificationCode) &&
        Objects.equals(this.transactionSerialNumber, addenda02.transactionSerialNumber) &&
        Objects.equals(this.transactionDate, addenda02.transactionDate) &&
        Objects.equals(this.authorizationCodeOrExpireDate, addenda02.authorizationCodeOrExpireDate) &&
        Objects.equals(this.terminalLocation, addenda02.terminalLocation) &&
        Objects.equals(this.terminalCity, addenda02.terminalCity) &&
        Objects.equals(this.terminalState, addenda02.terminalState) &&
        Objects.equals(this.traceNumber, addenda02.traceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, referenceInformationOne, referenceInformationTwo, terminalIdentificationCode, transactionSerialNumber, transactionDate, authorizationCodeOrExpireDate, terminalLocation, terminalCity, terminalState, traceNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda02 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    referenceInformationOne: ").append(toIndentedString(referenceInformationOne)).append("\n");
    sb.append("    referenceInformationTwo: ").append(toIndentedString(referenceInformationTwo)).append("\n");
    sb.append("    terminalIdentificationCode: ").append(toIndentedString(terminalIdentificationCode)).append("\n");
    sb.append("    transactionSerialNumber: ").append(toIndentedString(transactionSerialNumber)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    authorizationCodeOrExpireDate: ").append(toIndentedString(authorizationCodeOrExpireDate)).append("\n");
    sb.append("    terminalLocation: ").append(toIndentedString(terminalLocation)).append("\n");
    sb.append("    terminalCity: ").append(toIndentedString(terminalCity)).append("\n");
    sb.append("    terminalState: ").append(toIndentedString(terminalState)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
